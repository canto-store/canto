/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardUsersRouteImport } from './routes/dashboard/users'
import { Route as DashboardSellersRouteImport } from './routes/dashboard/sellers'
import { Route as DashboardBrandsRouteImport } from './routes/dashboard/brands'
import { Route as DashboardProductsIndexRouteImport } from './routes/dashboard/products/index'
import { Route as DashboardProductsProductIdEditRouteImport } from './routes/dashboard/products/$productId/edit'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardUsersRoute = DashboardUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardSellersRoute = DashboardSellersRouteImport.update({
  id: '/sellers',
  path: '/sellers',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardBrandsRoute = DashboardBrandsRouteImport.update({
  id: '/brands',
  path: '/brands',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardProductsIndexRoute = DashboardProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardProductsProductIdEditRoute =
  DashboardProductsProductIdEditRouteImport.update({
    id: '/products/$productId/edit',
    path: '/products/$productId/edit',
    getParentRoute: () => DashboardRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/brands': typeof DashboardBrandsRoute
  '/dashboard/sellers': typeof DashboardSellersRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/products': typeof DashboardProductsIndexRoute
  '/dashboard/products/$productId/edit': typeof DashboardProductsProductIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/brands': typeof DashboardBrandsRoute
  '/dashboard/sellers': typeof DashboardSellersRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/products': typeof DashboardProductsIndexRoute
  '/dashboard/products/$productId/edit': typeof DashboardProductsProductIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/brands': typeof DashboardBrandsRoute
  '/dashboard/sellers': typeof DashboardSellersRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/products/': typeof DashboardProductsIndexRoute
  '/dashboard/products/$productId/edit': typeof DashboardProductsProductIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/brands'
    | '/dashboard/sellers'
    | '/dashboard/users'
    | '/dashboard/'
    | '/dashboard/products'
    | '/dashboard/products/$productId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/brands'
    | '/dashboard/sellers'
    | '/dashboard/users'
    | '/dashboard'
    | '/dashboard/products'
    | '/dashboard/products/$productId/edit'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/brands'
    | '/dashboard/sellers'
    | '/dashboard/users'
    | '/dashboard/'
    | '/dashboard/products/'
    | '/dashboard/products/$productId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/users': {
      id: '/dashboard/users'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/sellers': {
      id: '/dashboard/sellers'
      path: '/sellers'
      fullPath: '/dashboard/sellers'
      preLoaderRoute: typeof DashboardSellersRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/brands': {
      id: '/dashboard/brands'
      path: '/brands'
      fullPath: '/dashboard/brands'
      preLoaderRoute: typeof DashboardBrandsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/products/': {
      id: '/dashboard/products/'
      path: '/products'
      fullPath: '/dashboard/products'
      preLoaderRoute: typeof DashboardProductsIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/products/$productId/edit': {
      id: '/dashboard/products/$productId/edit'
      path: '/products/$productId/edit'
      fullPath: '/dashboard/products/$productId/edit'
      preLoaderRoute: typeof DashboardProductsProductIdEditRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardBrandsRoute: typeof DashboardBrandsRoute
  DashboardSellersRoute: typeof DashboardSellersRoute
  DashboardUsersRoute: typeof DashboardUsersRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardProductsIndexRoute: typeof DashboardProductsIndexRoute
  DashboardProductsProductIdEditRoute: typeof DashboardProductsProductIdEditRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardBrandsRoute: DashboardBrandsRoute,
  DashboardSellersRoute: DashboardSellersRoute,
  DashboardUsersRoute: DashboardUsersRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardProductsIndexRoute: DashboardProductsIndexRoute,
  DashboardProductsProductIdEditRoute: DashboardProductsProductIdEditRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
