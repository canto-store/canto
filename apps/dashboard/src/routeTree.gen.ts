/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardSellersImport } from './routes/dashboard/sellers'
import { Route as DashboardProductsImport } from './routes/dashboard/products'
import { Route as DashboardBrandsImport } from './routes/dashboard/brands'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSellersRoute = DashboardSellersImport.update({
  id: '/sellers',
  path: '/sellers',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardProductsRoute = DashboardProductsImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardBrandsRoute = DashboardBrandsImport.update({
  id: '/brands',
  path: '/brands',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/brands': {
      id: '/dashboard/brands'
      path: '/brands'
      fullPath: '/dashboard/brands'
      preLoaderRoute: typeof DashboardBrandsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/products': {
      id: '/dashboard/products'
      path: '/products'
      fullPath: '/dashboard/products'
      preLoaderRoute: typeof DashboardProductsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/sellers': {
      id: '/dashboard/sellers'
      path: '/sellers'
      fullPath: '/dashboard/sellers'
      preLoaderRoute: typeof DashboardSellersImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardBrandsRoute: typeof DashboardBrandsRoute
  DashboardProductsRoute: typeof DashboardProductsRoute
  DashboardSellersRoute: typeof DashboardSellersRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardBrandsRoute: DashboardBrandsRoute,
  DashboardProductsRoute: DashboardProductsRoute,
  DashboardSellersRoute: DashboardSellersRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/brands': typeof DashboardBrandsRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/dashboard/sellers': typeof DashboardSellersRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard/brands': typeof DashboardBrandsRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/dashboard/sellers': typeof DashboardSellersRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/brands': typeof DashboardBrandsRoute
  '/dashboard/products': typeof DashboardProductsRoute
  '/dashboard/sellers': typeof DashboardSellersRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/brands'
    | '/dashboard/products'
    | '/dashboard/sellers'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard/brands'
    | '/dashboard/products'
    | '/dashboard/sellers'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/brands'
    | '/dashboard/products'
    | '/dashboard/sellers'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/brands",
        "/dashboard/products",
        "/dashboard/sellers",
        "/dashboard/"
      ]
    },
    "/dashboard/brands": {
      "filePath": "dashboard/brands.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/products": {
      "filePath": "dashboard/products.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/sellers": {
      "filePath": "dashboard/sellers.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
