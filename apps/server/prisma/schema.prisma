// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  password       String
  email_verified Boolean   @default(true)
  phone_number   String
  role           UserRole  @default(CUSTOMER)
  last_login     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("users")
}

model Seller {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  password       String
  email_verified Boolean  @default(true)
  phone_number   String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  brands         Brand[]
  
  @@map("sellers")
}

model Brand {
  id         Int       @id @default(autoincrement())
  name       String    @default("Brand")
  slug       String?
  email      String    @unique
  logo       String?
  seller     Seller    @relation(fields: [sellerId], references: [id])
  sellerId   Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Product    Product[]
  instagram_url String?
  
  @@map("brands")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  image       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Product     Product[]
  
  @@map("categories")
}


model ProductOption {
  id     Int                  @id @default(autoincrement())
  name   String               @unique
  values ProductOptionValue[]
  
  @@map("product_options")
}

model ProductOptionValue {
  id              Int                  @id @default(autoincrement())
  value           String
  productOption   ProductOption        @relation(fields: [productOptionId], references: [id])
  productOptionId Int
  variantLinks    VariantOptionValue[]
  
  @@map("product_option_values")
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  slug        String           @unique
  description String?
  sizeChart   String?
  brand       Brand            @relation(fields: [brandId], references: [id])
  brandId     Int
  category    Category         @relation(fields: [categoryId], references: [id])
  categoryId  Int
  variants    ProductVariant[]
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  
  @@map("products")
}

model ProductVariant {
  id          Int                   @id @default(autoincrement())
  product     Product               @relation(fields: [productId], references: [id])
  productId   Int
  sku         String                @unique
  price       Int
  stock       Int
  sale_id     Int?
  optionLinks VariantOptionValue[]
  images      ProductVariantImage[]
  created_at  DateTime              @default(now())
  updated_at  DateTime              @updatedAt
  
  @@map("product_variants")
}

model VariantOptionValue {
  variant       ProductVariant     @relation(fields: [variantId], references: [id])
  variantId     Int
  optionValue   ProductOptionValue @relation(fields: [optionValueId], references: [id])
  optionValueId Int

  @@id([variantId, optionValueId])
  @@map("variant_option_values")
}

model ProductVariantImage {
  id         Int            @id @default(autoincrement())
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  variantId  Int
  url        String
  alt_text   String?
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  
  @@map("product_variant_images")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  
  @@map("refresh_tokens")
}
