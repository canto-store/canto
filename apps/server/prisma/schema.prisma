// This is your Prisma schema file,
// learn more about the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SaleType {
  PERCENTAGE
  FIXED
}

enum ProductStatus {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}

enum ActivityType {
  SELLER_REGISTERED
  BRAND_CREATED
  PRODUCT_ADDED
  PRODUCT_UPDATED
}

enum UserRole {
  GUEST
  USER
  SELLER
  ADMIN
}

model User {
  id             Int         @id @default(autoincrement())
  name           String?
  email          String?     @unique
  password       String?
  email_verified Boolean     @default(false)
  phone_number   String?     @unique
  balance        Float       @default(0)
  Address        Address[]
  Cart           Cart?
  Order          Order[]
  brands         Brand[]
  sales          OrderItem[]
  role           UserRole[]  @default([GUEST])
  Activity       Activity[]
  ErrorLog       ErrorLog[]
  Wishlist       Wishlist[]
  last_login     DateTime?
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  @@map("users")
}

model Brand {
  id            Int       @id @default(autoincrement())
  name          String    @default("Brand")
  slug          String?
  email         String    @unique
  logo          String?
  seller        User      @relation(fields: [sellerId], references: [id])
  sellerId      Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  Product       Product[]
  description   String?
  instagram_url String?

  @@map("brands")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  image       String?
  aspect      String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Product     Product[]

  parentId    Int?       @map("parent_id")
  parent      Category?  @relation("CategoryToSubcategories", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToSubcategories")

  @@map("categories")
}

model ProductOption {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  values             ProductOptionValue[]
  VariantOptionValue VariantOptionValue[]

  @@map("product_options")
}

model ProductOptionValue {
  id                 Int                  @id @default(autoincrement())
  value              String
  productOption      ProductOption        @relation(fields: [productOptionId], references: [id])
  productOptionId    Int
  VariantOptionValue VariantOptionValue[]

  @@map("product_option_values")
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String
  slug        String            @unique
  description String?
  sizeChart   String?           @default("")
  brand       Brand             @relation(fields: [brandId], references: [id])
  brandId     Int
  category    Category          @relation(fields: [categoryId], references: [id])
  categoryId  Int
  status      ProductStatus
  variants    ProductVariant[]
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  rejection   ProductRejection?

  @@map("products")
  WishlistItem WishlistItem[]
}

model ProductRejection {
  id         Int      @id @default(autoincrement())
  productId  Int      @unique
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  reason     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("product_rejections")
}

model ProductVariant {
  id          Int                   @id @default(autoincrement())
  productId   Int
  product     Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku         String                @unique
  price       Float
  stock       Int
  sale_id     Int?
  sale        Sale?                 @relation(fields: [sale_id], references: [id])
  optionLinks VariantOptionValue[]
  images      ProductVariantImage[]
  CartItem    CartItem[]
  created_at  DateTime              @default(now())
  updated_at  DateTime              @updatedAt
  OrderItem   OrderItem[]

  @@map("product_variants")
}

model VariantOptionValue {
  id              Int                @id @default(autoincrement())
  variant         ProductVariant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId       Int
  optionValue     ProductOptionValue @relation(fields: [optionValueId], references: [id])
  optionValueId   Int
  productOption   ProductOption      @relation(fields: [productOptionId], references: [id])
  productOptionId Int // Ensures this link is tied to a specific ProductOption type

  @@unique([variantId, productOptionId]) // A variant can only have one value for a given option type
  @@map("variant_option_values")
}

model ProductVariantImage {
  id         Int            @id @default(autoincrement())
  variant    ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId  Int
  url        String
  alt_text   String?
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt

  @@map("product_variant_images")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("refresh_tokens")
}

model Sale {
  id         Int              @id @default(autoincrement())
  type       SaleType
  start_at   DateTime
  end_at     DateTime
  value      Int
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  variants   ProductVariant[]

  @@map("sales")
}

enum AddressType {
  HOUSE
  APARTMENT
  OFFICE
}

model Address {
  id                   Int         @id @default(autoincrement())
  user_id              Int
  type                 AddressType
  street_name          String
  building_number      String?
  apartment_number     String?
  floor                Int?
  phone_number         String
  additional_direction String?
  address_label        String?
  company_name         String?
  office_number        String?
  address_string       String
  sector_id            Int
  sector_name          String
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  user  User    @relation(fields: [user_id], references: [id])
  Order Order[]

  @@map("addresses")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  @@map("cart")
}

model CartItem {
  id        Int            @id @default(autoincrement())
  cart      Cart           @relation(fields: [cartId], references: [id])
  cartId    Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
  quantity  Int

  @@map("cart_items")
}

model Order {
  id              Int               @id @default(autoincrement()) @map("id")
  orderCode       String            @unique @map("order_code")
  userId          Int               @map("user_id")
  user            User              @relation(fields: [userId], references: [id])
  addressId       Int               @map("address_id")
  address         Address           @relation(fields: [addressId], references: [id])
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  items           OrderItem[]
  DelivericOrders DelivericOrders[]

  @@map("orders")
}

model DelivericOrders {
  id             Int      @id @map("id")
  orderId        Int      @map("order_id")
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  waybill        String   @unique @map("waybill")
  qrCode         String   @unique @map("qr_code")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  deliveryStatus String   @default("created") @map("delivery_status")

  @@map("deliveric_orders")
}

model OrderItem {
  id           Int            @id @default(autoincrement()) @map("id")
  orderId      Int            @map("order_id")
  order        Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variantId    Int            @map("variant_id")
  variant      ProductVariant @relation(fields: [variantId], references: [id])
  quantity     Int            @map("quantity")
  priceAtOrder Float          @map("price_at_order")
  User         User[]

  @@map("order_items")
}

model Activity {
  id          Int          @id @default(autoincrement())
  type        ActivityType
  entityName  String       @map("entity_name")
  entityId    Int          @map("entity_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  createdByid Int?         @map("created_by")
  createdBy   User?        @relation(fields: [createdByid], references: [id])

  @@map("activities")
}

model ErrorLog {
  id        Int      @id @default(autoincrement())
  message   String
  stack     String
  userId    Int?     @map("user_id")
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("error_logs")
}

model Wishlist {
  id         Int            @id @default(autoincrement())
  userId     Int
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt

  items      WishlistItem[]

  @@unique([userId]) // one wishlist per user
  @@map("wishlists")
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  productId  Int
  product    Product  @relation(fields: [productId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([wishlistId, productId])
  @@map("wishlist_items")
}

