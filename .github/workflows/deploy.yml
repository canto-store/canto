name: Deploy

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main
    paths:
      - 'apps/**'
      - 'nginx/**'
      - 'pnpm-lock.yaml'
      - 'package.json'
      - 'pnpm-workspace.yaml'
      - 'Dockerfile'
      - 'docker-compose*.yml'

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and Push All Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for web
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for server
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for dashboard
        id: meta-dashboard
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-dashboard
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for nginx
        id: meta-nginx
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-nginx
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: web
          build-args: |
            TARGET_APP=web
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha,scope=web
          cache-to: type=gha,mode=max,scope=web

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: server
          build-args: |
            TARGET_APP=server
          push: true
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}
          cache-from: type=gha,scope=server
          cache-to: type=gha,mode=max,scope=server

      - name: Build and push dashboard image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: dashboard
          build-args: |
            TARGET_APP=dashboard
          push: true
          tags: ${{ steps.meta-dashboard.outputs.tags }}
          labels: ${{ steps.meta-dashboard.outputs.labels }}
          cache-from: type=gha,scope=dashboard
          cache-to: type=gha,mode=max,scope=dashboard

      - name: Build and push nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: true
          tags: ${{ steps.meta-nginx.outputs.tags }}
          labels: ${{ steps.meta-nginx.outputs.labels }}
          cache-from: type=gha,scope=nginx
          cache-to: type=gha,mode=max,scope=nginx

  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create production environment file
        run: |
          cat > .env.prod << EOF
          # Domain configuration
          DOMAIN=${{ secrets.DOMAIN }}

          # Database
          DATABASE_URL=${{ secrets.DATABASE_URL }}

          # File upload services
          UPLOADTHING_TOKEN=${{ secrets.UPLOADTHING_TOKEN }}
          SPACES_KEY=${{ secrets.SPACES_KEY }}
          SPACES_SECRET=${{ secrets.SPACES_SECRET }}
          SPACES_REGION=${{ secrets.SPACES_REGION }}
          SPACES_BUCKET=${{ secrets.SPACES_BUCKET }}

          # External services
          ELASTICSEARCH_NODE=${{ secrets.ELASTICSEARCH_NODE }}
          ELASTICSEARCH_USERNAME=${{ secrets.ELASTICSEARCH_USERNAME }}
          ELASTICSEARCH_PASSWORD=${{ secrets.ELASTICSEARCH_PASSWORD }}
          DELIVERIC_API=${{ secrets.DELIVERIC_API }}
          DELIVERIC_USER=${{ secrets.DELIVERIC_USER }}
          DELIVERIC_PASSWORD=${{ secrets.DELIVERIC_PASSWORD }}

          # Container image references
          WEB_IMAGE=ghcr.io/${{ github.repository }}-web:latest
          SERVER_IMAGE=ghcr.io/${{ github.repository }}-server:latest
          DASHBOARD_IMAGE=ghcr.io/${{ github.repository }}-dashboard:latest
          NGINX_IMAGE=ghcr.io/${{ github.repository }}-nginx:latest
          EOF

      - name: Create production docker-compose override
        run: |
          cat > docker-compose.prod.override.yml << EOF
          services:
            web:
              image: \${WEB_IMAGE}
              environment:
                - UPLOADTHING_TOKEN=\${UPLOADTHING_TOKEN}
                - SPACES_KEY=\${SPACES_KEY}
                - SPACES_SECRET=\${SPACES_SECRET}
                - SPACES_REGION=\${SPACES_REGION}
                - SPACES_BUCKET=\${SPACES_BUCKET}

            server:
              image: \${SERVER_IMAGE}
              environment:
                - DATABASE_URL=\${DATABASE_URL}
                - ELASTICSEARCH_NODE=\${ELASTICSEARCH_NODE}
                - ELASTICSEARCH_USERNAME=\${ELASTICSEARCH_USERNAME}
                - ELASTICSEARCH_PASSWORD=\${ELASTICSEARCH_PASSWORD}
                - DELIVERIC_API=\${DELIVERIC_API}
                - DELIVERIC_USER=\${DELIVERIC_USER}
                - DELIVERIC_PASSWORD=\${DELIVERIC_PASSWORD}

            dashboard:
              image: \${DASHBOARD_IMAGE}

            nginx:
              image: \${NGINX_IMAGE}
          EOF

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e

            # Create deployment directory
            DEPLOY_DIR="/home/omar/canto"
            sudo mkdir -p $DEPLOY_DIR || true
            cd $DEPLOY_DIR

            # Create certbot directory if it doesn't exist
            mkdir -p $DEPLOY_DIR/certbot || true

            # Backup current deployment
            if [ -f docker-compose.yml ]; then
              echo "Creating backup of current deployment..."
              sudo cp docker-compose.yml docker-compose.yml.backup || true
              sudo cp .env.prod .env.prod.backup || true
            fi

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest images
            echo "Pulling latest images..."
            docker pull ghcr.io/${{ github.repository }}-web:latest
            docker pull ghcr.io/${{ github.repository }}-server:latest
            docker pull ghcr.io/${{ github.repository }}-dashboard:latest
            docker pull ghcr.io/${{ github.repository }}-nginx:latest

            # Create volumes if they don't exist
            docker volume create --name=ssl-certs || true
            docker volume create --name=certbot-data || true
            docker volume create --name=nginx-logs || true

            # Stop current services gracefully
            if [ -f docker-compose.yml ]; then
              echo "Stopping current services..."
              docker compose down --timeout 30 || true
            fi

            # Clean up old containers and images, but preserve volumes
            echo "Cleaning up old containers and images..."
            docker container prune -f || true
            docker image prune -f || true

      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: 'docker-compose.yml,docker-compose.prod.yml,.env.prod,docker-compose.prod.override.yml'
          target: '/home/omar/canto'
          overwrite: true

      - name: Start services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /home/omar/canto

            # Start services
            echo "Starting services with docker-compose..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml -f docker-compose.prod.override.yml --env-file .env.prod up -d

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/omar/canto

            echo "Deployment failed, attempting rollback..."

            # Stop failed deployment
            docker compose -f docker-compose.yml -f docker-compose.prod.yml -f docker-compose.prod.override.yml down --timeout 30 || true

            # Restore backup if it exists
            if [ -f docker-compose.yml.backup ] && [ -f .env.prod.backup ]; then
              echo "Restoring previous deployment..."
              sudo cp docker-compose.yml.backup docker-compose.yml
              sudo cp .env.prod.backup .env.prod
              
              # Start previous version
              docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d || true
              
              echo "Rollback completed"
            else
              echo "No backup found, manual intervention required"
            fi
