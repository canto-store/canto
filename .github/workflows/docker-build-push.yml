name: CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build, Push & Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Extract current version
        id: current-version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Determine version bump type from commit message
        id: bump-type
        run: |
          # Get the most recent commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Determine version bump type based on commit message
          if [[ "$COMMIT_MSG" =~ bump[[:space:]]+major || "$COMMIT_MSG" =~ \[major\] ]]; then
            echo "BUMP_TYPE=major" >> $GITHUB_ENV
            echo "Detected major version bump from commit message"
          elif [[ "$COMMIT_MSG" =~ bump[[:space:]]+minor || "$COMMIT_MSG" =~ \[minor\] ]]; then
            echo "BUMP_TYPE=minor" >> $GITHUB_ENV
            echo "Detected minor version bump from commit message"
          else
            echo "BUMP_TYPE=patch" >> $GITHUB_ENV
            echo "Defaulting to patch version bump"
          fi

      - name: Bump version based on commit message
        id: bump-version
        run: |
          # Get current version parts
          IFS='.' read -r -a version_parts <<< "${{ env.VERSION }}"
          MAJOR="${version_parts[0]}"
          MINOR="${version_parts[1]}"
          PATCH="${version_parts[2]}"

          # Bump version based on detected type
          if [[ "${{ env.BUMP_TYPE }}" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ env.BUMP_TYPE }}" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

          # Update package.json with new version
          node -e "const pkg = require('./package.json'); pkg.version = '${NEW_VERSION}'; fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');"

          echo "Bumped version from ${{ env.VERSION }} to ${NEW_VERSION}} (${BUMP_TYPE})"

      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "soubky0" --password-stdin

      - name: Build & Push
        run: |
          # Build and push with specific version tag
          docker build -t ghcr.io/canto-store/canto-frontend-v2:v${{ env.NEW_VERSION }} -t ghcr.io/canto-store/canto-frontend-v2:latest .
          docker push ghcr.io/canto-store/canto-frontend-v2:v${{ env.NEW_VERSION }}
          docker push ghcr.io/canto-store/canto-frontend-v2:latest

      - name: Commit version bump
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: bump version to ${{ env.NEW_VERSION }}"
          file_pattern: package.json
          tagging_message: "v${{ env.NEW_VERSION }}"

      - name: Deploy on Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull ghcr.io/canto-store/canto-frontend-v2:latest
            docker stop canto-frontend-v2 || true
            docker rm canto-frontend-v2 || true
            docker run -d \
              --name canto-frontend-v2 \
              -p 3030:3030 \
              --restart unless-stopped \
              ghcr.io/canto-store/canto-frontend-v2:latest
