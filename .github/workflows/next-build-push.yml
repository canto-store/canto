name: CD

on:
  push:
    branches:
      - main
    paths:
      - "apps/web/**"

permissions:
  contents: read
  packages: write

jobs:
  deploy_application:
    name: Build, Publish, and Deploy Next.js App
    runs-on: blacksmith-4vcpu-ubuntu-2404

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Application Version
        id: extract_version
        run: echo "version=$(node -p "require('./apps/web/package.json').version")" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Publish Docker Image
        run: |
          IMAGE_BASE_NAME="ghcr.io/${{ github.repository }}-web"
          VERSIONED_IMAGE_NAME="${IMAGE_BASE_NAME}:v${{ steps.extract_version.outputs.version }}"
          LATEST_IMAGE_NAME="${IMAGE_BASE_NAME}:latest"
          cd apps/web
          DOCKER_BUILDKIT=1 docker build --secret id=uploadthing_token,env=UPLOADTHING_TOKEN -t $VERSIONED_IMAGE_NAME -t $LATEST_IMAGE_NAME .
          docker push $VERSIONED_IMAGE_NAME
          docker push $LATEST_IMAGE_NAME
        env:
          UPLOADTHING_TOKEN: ${{ secrets.UPLOADTHING_TOKEN }}

      - name: Deploy Application to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            IMAGE_REFERENCE="ghcr.io/${{ github.repository }}-web:latest"
            CONTAINER_NAME="${{ github.event.repository.name }}-web"
            APP_EXTERNAL_PORT="3000"
            APP_INTERNAL_PORT="3000"

            echo "Pulling latest image: $IMAGE_REFERENCE"
            docker pull $IMAGE_REFERENCE

            echo "Stopping existing container (if any): $CONTAINER_NAME"
            docker stop $CONTAINER_NAME || true

            echo "Removing existing container (if any): $CONTAINER_NAME"
            docker rm $CONTAINER_NAME || true

            echo "Starting new container: $CONTAINER_NAME"
            docker run -d \
              --name $CONTAINER_NAME \
              -p $APP_EXTERNAL_PORT:$APP_INTERNAL_PORT \
              --restart unless-stopped \
              -e UPLOADTHING_TOKEN=${{ secrets.UPLOADTHING_TOKEN }} \
              $IMAGE_REFERENCE