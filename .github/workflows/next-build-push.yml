name: Web

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main
    paths:
      - 'apps/web/**'
      - 'pnpm-lock.yaml'
      - 'package.json'
      - 'pnpm-workspace.yaml'
      - 'Dockerfile'

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: blacksmith-4vcpu-ubuntu-2404

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: web
          build-args: |
            TARGET_APP=web
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: |
            uploadthing_token=${{ secrets.UPLOADTHING_TOKEN }}

  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: blacksmith-4vcpu-ubuntu-2404

    steps:
      - name: Deploy Application to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            IMAGE_REFERENCE="ghcr.io/${{ github.repository }}-web:latest"
            CONTAINER_NAME="${{ github.event.repository.name }}-web"
            APP_EXTERNAL_PORT="3000"
            APP_INTERNAL_PORT="3000"

            echo "Pulling latest image: $IMAGE_REFERENCE"
            docker pull $IMAGE_REFERENCE

            echo "Stopping existing container (if any): $CONTAINER_NAME"
            docker stop $CONTAINER_NAME || true

            echo "Removing existing container (if any): $CONTAINER_NAME"
            docker rm $CONTAINER_NAME || true

            echo "Starting new container: $CONTAINER_NAME"
            docker run -d \
              --name $CONTAINER_NAME \
              -p $APP_EXTERNAL_PORT:$APP_INTERNAL_PORT \
              --restart unless-stopped \
              -e UPLOADTHING_TOKEN=${{ secrets.UPLOADTHING_TOKEN }} \
              $IMAGE_REFERENCE
